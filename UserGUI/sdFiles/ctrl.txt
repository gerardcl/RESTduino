HTTP/1.1 200 OK
Content-Type: application/x-javascript
Connection: close

/******************************************************
 *              CONFIGURE Arduino Port                *
 ******************************************************/
function configurePort(portId, type){
	var code = "";
	if (portId.indexOf("an")==0){
		code += "i";
		code += portId.substring(2,3);
	} else {
		code += "o";
		code += portId.substring(3,4);
	}
	
	if (type=="Empty"){
		code += "e";
	} else if (type=="Raw"){
		code += "r";
	} else if (type=="Temperature"){
		code += "t";
	} else if (type=="Potenciometer"){
		code += "p";
	} else if (type=="Light"){
		code += "l";
	} else if (type=="Logical"){
		code += "b";
	} else if (type=="PWM"){
		code += "w";
	} else {
		return;
	}
	
	updatePorts("set/" + code)
}

/******************************************************
 *              CONFIGURE Device Port                 *
 ******************************************************/
function configDevice(id, type) {    
    document.getElementById(id).innerHTML = type + " <span class='caret'></span>";
	document.getElementById(id).setAttribute("Value", type);
	if (type=="Empty"){
		document.getElementById(id).setAttribute("class", "btn btn-default dropdown-toggle");
	}else if (type=="Logical")
		document.getElementById(id).setAttribute("class", "btn btn-primary dropdown-toggle");
	else if (type=="PWM")
		document.getElementById(id).setAttribute("class", "btn btn-success dropdown-toggle");
	else if (type=="Raw")
		document.getElementById(id).setAttribute("class", "btn btn-info dropdown-toggle");
	else if (type=="Temperature")
		document.getElementById(id).setAttribute("class", "btn btn-danger dropdown-toggle");
	else if (type=="Potenciometer")
		document.getElementById(id).setAttribute("class", "btn btn-success dropdown-toggle");
	else if (type=="Light")
		document.getElementById(id).setAttribute("class", "btn btn-warning dropdown-toggle");
	else 
		document.getElementById(id).setAttribute("class", "btn btn-default dropdown-toggle");

}
/******************************************************
 *                    IPv4 Functions                  *
 ******************************************************/
/* Compare IPv4 Addresses */
function compareIPv4 (ip1Int, ip2Int){
	for (var i=0; i<4; i++){
		if (ip1Int[i]>ip2Int[i]){
			return 1;
		}else if (ip1Int[i]<ip2Int[i]){
			return (-1);
		}
	}
	return 0;
}

/* Count the difference between IPv4 addresses */
function countAddr (ip1Int, ip2Int){
	var res = ip1Int[3] - ip2Int[3] + 1;
	res += (ip1Int[2] - ip2Int[2])*256;
	res += (ip1Int[1] - ip2Int[1])*256*256;
	res += (ip1Int[0] - ip2Int[0])*256*256*256;
	return res;
}

/* Convert an IPv4 String to an 4 integer array */
function convertIPv4FromString (ipIn) {
	var res = ipIn.split(".");
	var len = res.length;
	if (len!=4){
		window.alert("Bad format in one IP Address");
		return null;
	}
	var ipOut = new Array();
	for (var i = 0; i < len; i++){
		ipOut[i] = parseInt(res[i]);
		if (ipOut[i]>255){
			window.alert("The IP address number must be below 255!");
			return null;
		}
	}
	return ipOut;
}

/* Validate IPv4 */
function validateIPv4(addr){
	var res = addr.split(".");
	var len = res.length;
	if (len!=4){
		return false;
	}
	for (var i = 0; i < len; i++){
		val = parseInt(res[i]);
		if (val>256 || val<0){
			return false;
		}
	}
	return true;
}

/******************************************************
 *                     REST Requests                  *
 ******************************************************/
/* Create Cross domain petition */
function createCORSRequest(method, url) {
  var xhr = new XMLHttpRequest();
  if ("withCredentials" in xhr) {
    // Check if the XMLHttpRequest object has a "withCredentials" property.
    // "withCredentials" only exists on XMLHTTPRequest2 objects.
    xhr.open(method, url, true);
  } else if (typeof XDomainRequest != "undefined") {
    // Otherwise, check if XDomainRequest.
    // XDomainRequest only exists in IE, and is IE's way of making CORS requests.
    xhr = new XDomainRequest();
    xhr.open(method, url);

  } else {
    // Otherwise, CORS is not supported by the browser.
    xhr = null;

  }
  return xhr;
}

/******************************************************
 *                     UPDATE Ports                   *
 ******************************************************/
function updatePorts(sufix){
	var ipAddr = document.getElementById("ipAddress").value;
	var url = "http:/"+ipAddr+":80/" + sufix;
	var responseText = null;
	
	// Check if IP address is valid
	if (!validateIPv4(ipAddr)){
		window.alert('IP Address not valid!');
		return;
	}
	
	// Create request and check if the navigation browser is valid
	var xhr = createCORSRequest('GET', url);
	if (!xhr) {
		window.alert('CORS not supported');
		return;
	}
	
	// Response handlers
	xhr.onload = function() {
		var text = xhr.responseText;
		var config = JSON.parse(xhr.responseText);
		for (var i = 0; i<6; i++){
			var port = config[i].in;
			var type = config[i].type;
			configDevice("an" + port, type)
		}
		for (var i = 6; i<12; i++){
			var port = config[i].out;
			var type = config[i].type;
			configDevice("out" + port, type)
		}
	};

	xhr.onerror = function() {
		window.alert("Woops, there was an error making the request.\nURL:'"+url+"'");
	};

	xhr.send();
}

/******************************************************
 *                     READ INPUTS                    *
 ******************************************************/
 var timer = null;
 function startAutoRead (){
	var refreshTime = document.getElementById("refreshTime").value;
	if (!parseInt(refreshTime)>0){
		window.alert("The refresh time must be numeric!");
		return;
	}
		
	timer = setInterval(function () { readValues();},refreshTime*1000);
	readValues()
}
 function stopAutoRead(){
	clearInterval(timer);
 }

function readValues(){
	var ipAddr = document.getElementById("ipAddress").value;
	var urlInputs = "http:/"+ipAddr+":80/sensors";
	var responseText = null;
	
	// Check if IP address is valid
	if (!validateIPv4(ipAddr)){
		stopAutoRead();
		window.alert('IP Address not valid!');
		return;
	}
	
	// Create request and check if the navigation browser is valid
	var xhr = createCORSRequest('GET', urlInputs);
	if (!xhr) {
		stopAutoRead();
		window.alert('CORS not supported');
		return;
	}
	// Response handlers
	xhr.onload = function() {		
		var values = JSON.parse(xhr.responseText);
		var table = document.getElementById("analogReads");
		table.innerHTML = "";
		for (var i = 0; i<6; i++){
			var port = values[i].in;
			var type = values[i].val;
			table.innerHTML += "<tr><td><center>" + port + "</center></td><td><center>" + type + "</center></td></tr>";
        }
		readOutputs();
	};
	xhr.onerror = function() {
		stopAutoRead();
		window.alert("Woops, there was an error making the request.\nURL:'"+urlInputs+"'");
	};
	xhr.send();
}

function setOutput(code) {
    var ipAddr = document.getElementById("ipAddress").value;
    var urlOutputs = "http:/" + ipAddr + ":80/out/" + code;
    var xhr = createCORSRequest('GET', urlOutputs);
    xhr.onload = function () {
        var values = JSON.parse(xhr.responseText);
        var table = document.getElementById("actuators");
        table.innerHTML = "";
        for (var i = 0; i < 6; i++) {
            var port = values[i].out;
            var value = values[i].val;
			if (value!="Empty"){
				table.innerHTML += "<tr><td><center>" + port + "</center></td><td><center>" + value + "</center></td><td><div class='btn-group btn-group-sm'><button class='lbl btn-success' onclick='setOutput(\"" + i + "1\")'>On</button><button class='lbl btn-danger btn-xs' onclick='setOutput(\"" + i + "0\")'>Off</button></div></td></tr>";
			} else {
				table.innerHTML += "<tr><td><center>" + port + "</center></td><td><center>" + value + "</center></td><td></td></tr>";
			}
        }
    };
    xhr.onerror = function () {
        stopAutoRead();
        window.alert("Woops, there was an error making the request.\nURL:'" + urlOutputs + "'");
    };
    xhr.send();
}

function readOutputs() {
    var ipAddr = document.getElementById("ipAddress").value;
    var urlOutputs = "http:/" + ipAddr + ":80/actuators";
    var xhr = createCORSRequest('GET', urlOutputs);
    xhr.onload = function () {
        var values = JSON.parse(xhr.responseText);
        var table = document.getElementById("actuators");
        table.innerHTML = "";
        for (var i = 0; i < 6; i++) {
            var port = values[i].out;
            var value = values[i].val;
			if (value!="Empty"){
				table.innerHTML += "<tr><td><center>" + port + "</center></td><td><center>" + value + "</center></td><td><div class='btn-group btn-group-sm'><button class='lbl btn-success' onclick='setOutput(\"" + i + "1\")'>On</button><button class='lbl btn-danger btn-xs' onclick='setOutput(\"" + i + "0\")'>Off</button></div></td></tr>";
			} else {
				table.innerHTML += "<tr><td><center>" + port + "</center></td><td><center>" + value + "</center></td><td></td></tr>";
			}
		}
    };
    xhr.onerror = function () {
        stopAutoRead();
        window.alert("Woops, there was an error making the request.\nURL:'" + urlOutputs + "'");
    };
    xhr.send();
}

function readInputs(){
	var ipAddr = document.getElementById("ipAddress").value;
	var url = "http:/"+ipAddr+":80/sensors";
	var responseText = null;
	
	// Check if IP address is valid
	if (!validateIPv4(ipAddr)){
		stopAutoRead();
		window.alert('IP Address not valid!');
		return;
	}
	
	// Create request and check if the navigation browser is valid
	var xhr = createCORSRequest('GET', url);
	if (!xhr) {
		stopAutoRead();
		window.alert('CORS not supported');
		return;
	}
	
	// Response handlers
	xhr.onload = function() {		
		var values = JSON.parse(xhr.responseText);
		var table = document.getElementById("analogReads");
		table.innerHTML = "";
		for (var i = 0; i<6; i++){
			var port = values[i].in;
			var type = values[i].val;
			table.innerHTML += "<tr><td><center>"+port+"</center></td><td><center>"+type+"</center></td></tr>";		}
	};

	xhr.onerror = function() {
		stopAutoRead();
		window.alert("Woops, there was an error making the request.\nURL:'"+url+"'");
	};

	xhr.send();
}

function findDevices () {
	var startAddr =  document.getElementById("startIP").value;
	var stopAddr =  document.getElementById("endIP").value;
	
	var startAdrrInt = convertIPv4FromString(startAddr);
	var stopAddrInt = convertIPv4FromString(stopAddr);
	
	if (startAdrrInt==null || stopAddrInt==null){
		return;
	}
	
	var comparation = compareIPv4 (stopAddrInt, startAdrrInt);
	if (comparation <= 0){
		window.alert("The start address must be lower than the stop address\nStart address: " + startAddr + "\nStop address: " + stopAddr);
		return;
	}
	var count = countAddr (stopAddrInt, startAdrrInt);
	var progressbar = document.getElementById("progressbar");
	progressbar.setAttribute("aria-valuemax", count-1);
	var progresslbl = document.getElementById("progresslbl");
	var devicesTable = document.getElementById("devicesTable");
	devicesTable.innerHTML = "";
	for (var i = 0; i<count; i++){
		progressbar.setAttribute("style", "width: " + (i/(count-1)*100.0) + "%");
		progresslbl.innerHTML = (i/(count-1)*100.0) + "% Complete";
		//devicesTable.innerHTML += "<tr><td><center>"+i+"</center></td><td>192.168.10.2</td><td><span class=\"label \"" + "label-success"+"\">Success</span></td></tr>";
		if (i%2==0){
			devicesTable.innerHTML += "<tr><td><center>"+i+"</center></td><td>192.168.10.2</td><td><span class=\"label " + "label-success"+"\">Online</span></td></tr>";
		}else{
			devicesTable.innerHTML += "<tr><td><center>"+i+"</center></td><td>192.168.10.2</td><td><span class=\"label label-warning\">Offline</span></td></tr>";
			}
	}
	//window.alert("Start address: " + startAddr + "\nStop address: " + stopAddr + "\nNumber of addreses: " + count);
}
